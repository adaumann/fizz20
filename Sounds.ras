
// set up Vic Sounds
procedure StopSounds();

procedure SetupSound();
var
begin
	StopSounds();
	poke(^@VICvolume, 0, 15);

end;

procedure PlayNote(sindex: byte, note: byte);
begin
	poke(^@VICsnd1, sindex, note);
end;

procedure StopSounds();
var 
	i: byte;
begin
	for i:= 0 to 4 do begin
		vsnd[i] := 0;
		vsndTime[i] := 0;
		psnd[i] := #noSound;
	end;

	poke(^@VICsnd1, 0, 0);
	poke(^@VICsnd2, 0, 0);
	poke(^@VICsnd3, 0, 0);
	poke(^@VICsnd4, 0, 0);
end;

procedure SndTime(s:byte);
begin
		// decrease time
		if (vsndTime[s] > 0) then vsndTime[s] := vsndTime[s] - 1;
		// after decreasing time, if now = 0 then go to next command
		if (vsndTime[s] = 0) then psnd[s] := psnd[s] + 2; // goto next command
end;

// Play active sounds on voice 1
procedure UpdateSoundInternal(s : byte);
var
	duration: byte;
begin
	soundPointer := Int2Ptr(psnd[s]);
	// idle
	if (soundPointer[0] = @VSA_IDLE) then
	begin

		if (vsnd[s] <> 0) then
		begin
			vsnd[s] := 0;
			PlayNote(s,0);
			//poke(tempPointer[0], 0, 0);
		end;	
		return();		

	end;
	// play note
	if (soundPointer[0] = @VSA_NOTE or soundPointer[0] = @VSA_PAUSE) then
	begin
			
		//addbreakpoint(); nop(3);
		// if time = 0 at start, then this is a new note command			
		if (vsndTime[s] = 0) then
		begin
			vsndTime[s] := soundPointer[1]; // get duration
			if soundPointer[0] = @VSA_NOTE then begin
				PlayNote(s, vsnd[s]);
			end;
			if soundPointer[0] = @VSA_PAUSE then begin
				PlayNote(s,0);
 			end;			
		end;
	end;

	// increment
	if (soundPointer[0] & @VSA_INC = @VSA_INC) then
	begin
		duration := soundPointer[0];
		duration := duration - @VSA_INC;
		// if time = 0 at start, then this is a new note command			
		if (vsndTime[s] = 0) then vsndTime[s] := soundPointer[ 1 ]; // get duration

		vsnd[s] := vsnd[s] + duration;
		PlayNote(s, vsnd[s]);

	end;

	// decrement
	if (soundPointer[0] & @VSA_DEC = @VSA_DEC) then
	begin
		duration := soundPointer[0];
		duration := duration - @VSA_DEC;
		if (vsndTime[s] = 0) then vsndTime[s] := soundPointer[1]; // get duration
		vsnd[s] := vsnd[s] - duration;
		PlayNote(s, vsnd[s]);

	end;
	SndTime(s);


end;

// ----------------------------------------------------------------------
// Play active sounds
procedure UpdateSound();
begin
	UpdateSoundInternal(0);
	UpdateSoundInternal(1);
	UpdateSoundInternal(2);
	UpdateSoundInternal(3);

end;