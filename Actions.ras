procedure ActionOpenDoor(actorId: byte);
var 
	receiverId: byte;
begin 
	receiverId := actorList[actorId].receiverId;
	if(objectList[receiverId].component2 & @COMP_DOOR_2 = @COMP_DOOR_2) then begin
		if(objectList[receiverId].onOff = @OFF) then begin
			SetZLayer(receiverId, @Z_MAIN, @Z_BACK1);
			SwitchAnimation(receiverId,@ANIM_DOOR_ON);
			objectList[receiverId].onOff := @ON;
		end;	
	end;
end;

procedure ActionCloseDoor(actorId: byte);
var
	receiverId: byte;
begin 
	receiverId := actorList[actorId].receiverId;
	if(objectList[receiverId].component2 & @COMP_DOOR_2 = @COMP_DOOR_2) then begin
		if(objectList[receiverId].onOff = @ON) then begin
			SetZLayer(receiverId, @Z_BACK1, @Z_MAIN);
			SwitchAnimation(receiverId,@ANIM_DOOR_OFF);
			objectList[receiverId].onOff := @OFF;
		end;	
	end;
end;

procedure ActionOpenExit(actorId: byte);
var 
	receiverId: byte;
begin 
	receiverId := actorList[actorId].receiverId;
	if(objectList[receiverId].component3 & @COMP_EXIT_3 = @COMP_EXIT_3) then begin
		if(objectList[receiverId].onOff = @OFF) then begin
			objectList[receiverId].animId := $FF;
			SwitchAnimation(receiverId,@ANIM_EXIT_ON);
			objectList[receiverId].onOff := @ON;
		end;	
	end;
end;

procedure ActionCloseExit(actorId: byte);
var
	receiverId: byte;
begin 
	receiverId := actorList[actorId].receiverId;
	if(objectList[receiverId].component3 & @COMP_EXIT_3 = @COMP_EXIT_3) then begin
		if(objectList[receiverId].onOff = @ON) then begin
			objectList[receiverId].animId := $FF;
			SwitchAnimation(receiverId,@ANIM_EXIT_OFF);
			objectList[receiverId].onOff := @OFF;
		end;	
	end;
end;

procedure ActionLaserCannonOn(actorId: byte);
var
	receiverId: byte;
begin 
	receiverId := actorList[actorId].receiverId;
	if(objectList[receiverId].component1 & @COMP_LASER_1 = @COMP_LASER_1) then begin
		objectList[receiverId].onOff := @ON;
	end;
end;

procedure ActionLaserCannonOff(actorId: byte);
var
	receiverId: byte;
begin 
	receiverId := actorList[actorId].receiverId;
	if(objectList[receiverId].component1 & @COMP_LASER_1 = @COMP_LASER_1) then begin
		objectList[receiverId].onOff := @OFF;
	end;
end;

procedure ActionFontaineOn(actorId: byte);
var
	receiverId: byte;
begin 
	receiverId := actorList[actorId].receiverId;
	if(objectList[receiverId].component2 & @COMP_FONTAINE_2 = @COMP_FONTAINE_2) then begin
		objectList[receiverId].onOff := @ON;
	end;
end;

procedure ActionFontaineOff(actorId: byte);
var
	receiverId: byte;
begin 
	receiverId := actorList[actorId].receiverId;
	if(objectList[receiverId].component2 & @COMP_FONTAINE_2 = @COMP_FONTAINE_2) then begin
		objectList[receiverId].onOff := @OFF;
	end;
end;

procedure ActionPrintText(actorId: byte);
var
	textId,x: byte;
begin
	textId := actorList[actorId].param0;
	x := actorList[actorId].param1;
	textTimer := actorList[actorId].param2;
	sp := levStrings[textId];
	PrintText(x);
end;

procedure ActionSetGrav(actorId: byte);
var
	receiverId: byte;
begin 
	receiverId := actorList[actorId].receiverId;
	objectList[receiverId].physGravity := actorList[actorId].param0;
end;	

procedure ActionSwitchOn(actorId: byte);
var
	receiverId: byte;
begin 
	receiverId := actorList[actorId].receiverId;
	if(objectList[receiverId].component2 & @COMP_SWITCH_2 = @COMP_SWITCH_2) then begin
		SwitchAnimation(receiverId, @ANIM_SWITCH_ON);
		objectList[receiverId].onOff := @ON;
//		DispatchEvent(@EVENT_SWITCH_ON, receiverId, $FF, $FF);
	end;
end;

procedure ActionSwitchOff(actorId: byte);
var
	receiverId: byte;
begin
	
	receiverId := actorList[actorId].receiverId;
	if(objectList[receiverId].component2 & @COMP_SWITCH_2 = @COMP_SWITCH_2) then begin
		SwitchAnimation(receiverId, @ANIM_SWITCH_OFF);
		objectList[receiverId].onOff := @OFF;
//		DispatchEvent(@EVENT_SWITCH_OFF, receiverId, $FF, $FF);
	end;
end;

procedure ActionBulkGrav(actorId: byte);
var
	id,i : byte;
begin 
	for i:=0 to countDyn do	begin
		id := dynObjectList[i];
		if(objectList[id].component3 & @COMP_BULK_PHYS_3 = @COMP_BULK_PHYS_3) then begin
			objectList[id].physGravity := actorList[actorId].param0;
		end;
	end;
end;


procedure DispatchEvent(event: byte, senderId: byte, p1,p2: byte);
var
	i, action: byte;
begin
	for i :=  0 to @MAX_ACTORS do begin
		if(actorList[i].event = $FF) then break;
		if(actorList[i].event = event and actorList[i].senderId = senderId) then begin
			action := actorList[i].action;
			case action of
		        @ACTION_DOOR_OPEN: ActionOpenDoor(i);
		        @ACTION_DOOR_CLOSE: ActionCloseDoor(i);
		        @ACTION_EXIT_OPEN: ActionOpenExit(i);
		        @ACTION_EXIT_CLOSE: ActionCloseExit(i);
		        @ACTION_PRINT_TEXT: ActionPrintText(i);
				@ACTION_LASERCANNON_ON: ActionLaserCannonOn(i);
				@ACTION_LASERCANNON_OFF: ActionLaserCannonOff(i);
				@ACTION_FONTAINE_ON: ActionFontaineOn(i);
				@ACTION_FONTAINE_OFF: ActionFontaineOff(i);
				@ACTION_SET_GRAV: ActionSetGrav(i);
				@ACTION_SWITCH_OFF: ActionSwitchOff(i);
				@ACTION_SWITCH_ON: ActionSwitchOn(i);
				@ACTION_SET_GRAV_BULK: ActionBulkGrav(i);
		        @ACTION_CLEAR_TEXT: ClearText();
   			end;
		end;
	end;
end;